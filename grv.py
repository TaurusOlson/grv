#!/usr/bin/env python

"""
A script for generating random values with the command line.

"""


import random
import argparse


def uniform(domain=None):
    """Generate a random value in the given domain using a uniform distribution

    Usage
    -----
    r = uniform(domain=[_min, _max])

    Parameters
    ----------
    domain : list
        The min and the max values of the domain
        If `domain` is not provided: _min, _max = 0, 1

    Returns
    -------
    A random value within the chosen domain

    """
    if domain:
        _min = domain[0]
        _max = domain[1]
    else:
        _min = 0
        _max = 1

    return random.random() * (_max - _min) + _min


def normal(parameters=None):
    """Generate a random value with the parameters of a normal distribution

    Usage
    -----
    r = normal(parameters=[mu, sigma])

    Parameters
    ----------
    parameters : list
        The mean (mu) and the standard deviation (sigma) of the normal
        distribution.
        If `parameters` is not provided: mu, sigma = 0, 1


    Returns
    -------
    A random value generated by a normal distribution centered around mu with
    a standard deviation sigma.

    """
    if parameters:
        mu = parameters[0]
        sigma = parameters[1]
    else:
        mu = 0
        sigma = 1

    return random.gauss(mu, sigma)


# The argument parser
parser = argparse.ArgumentParser(description="Generate random values")
parser.add_argument("parameters", type=float, nargs="*", help="a distribution")
parser.add_argument("--uniform", '-u', dest="accumulate", action="store_const",
                    const=uniform, default=uniform)
parser.add_argument("--normal", '-n', dest="accumulate", action="store_const",
                    const=normal, default=normal)

args = parser.parse_args()


if __name__ == '__main__':
    n = 1
    if len(args.parameters) == 3:
        n = int(args.parameters[2])

    for i in range(n):
        print args.accumulate(args.parameters)
